// Data Snap v1

exports[`help stderr`] = {
  "data": "",
  "meta": {
    "expires": null
  }
}

exports[`help stdout`] = {
  "data": "Usage: hostlocal [options] [directory]\n\nArguments:\n  directory                   Directory to serve. (default: cwd)\n\nOptions:\n  -6, --ipv6                  Listen on IPv6 only, if host supports both IPv4\n                              and IPv6.\n  -c, --config \u003Cfile\u003E         If the given file exists, import it as a module\n                              and use its default export as the options.  Name\n                              is relative to cwd. Command line parameters\n                              overwrite options from the config file. (default:\n                              \".hostlocal.js\")\n  --certDir \u003Cdirectory\u003E       Directory, relative to cwd, to cache cert info.\n                              (default: \".cert\")\n  -e, --exec \u003Cshell command\u003E  Execute this command when the glob changes.\n                              (default: \"npm run build\")\n  -g, --glob \u003Cpattern\u003E        Set of files to watch.  If one of these changes,\n                              execute the command in the --exec option.  Can be\n                              specified multiple times.\n  -h, --help                  display help for command\n  -H, --host \u003Caddress\u003E        Hostname or IP address to listen on. \"::\" for\n                              everything. (default: \"localhost\")\n  -i, --initial               If glob is specified, run the exec command on\n                              startup, before listening\n  --notAfterDays \u003Cnumber\u003E     How many days is the certificate valid? (default:\n                              7)\n  -o, --open \u003Cpath\u003E           Open this path in the default browser.  Relative\n                              to server root.  If empty, do not open anything.\n                              (default: \"\u002F\")\n  -p, --port \u003Cnumber\u003E         Port to serve content from.  Use 0 to get an\n                              unused port. (default: 8111)\n  -P, --prefix \u003Cstring\u003E       Make all of the URLs served have paths that start\n                              with this prefix, followed by a slash.\n  -q, --quiet                 Do not do logging\n  --rawMarkdown               Do not process markdown into HTML\n  -t, --timeout \u003Cnumber\u003E      Time, in ms, to allow exec to run.\n  -V, --version               output the version number\n",
  "meta": {
    "expires": null
  }
}

exports[`parse stderr`] = {
  "data": "error: option '-p, --port \u003Cnumber\u003E' argument 'aaaa' is invalid. not a valid integer.\n",
  "meta": {
    "expires": null
  }
}

exports[`parse stdout`] = {
  "data": "",
  "meta": {
    "expires": null
  }
}
